{"version":3,"sources":["webpack:///./pages/starship-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_react","__webpack_require__","_relaks","_list","StarshipPage","meanwhile","this","props","route","swapi","show","_react2","default","createElement","StarshipPageSync","fetchOne","params","id","starship","fetchMultiple","films","minimum","pilots","AsyncComponent","displayName","_props2","className","name","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","MGLT","hyperdrive_rating","crew","passenger","cargo_capacity","consumables","starship_class","List","urls","items","pageName","field","_loading2","PureComponent","map","url","index","item","pending","extractID","find","text","linkProps","href","undefined","key","defaultProps","Loading"],"mappings":"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","file":"starship-page.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { AsyncComponent } from 'relaks';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\nclass StarshipPage extends AsyncComponent {\n    static displayName = 'StarshipPage';\n\n    /**\n     * Retrieve remote data and render the synchronize half of this component\n     *\n     * @param  {Meanwhile}  meanwhile\n     *\n     * @return {VNode}\n     */\n    async renderAsync(meanwhile) {\n        let { route, swapi } = this.props;\n        let props = {\n            route,\n        };\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.starship = await swapi.fetchOne(`/starships/${route.params.id}/`);\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.films = await swapi.fetchMultiple(props.starship.films, { minimum: '60%' });\n        meanwhile.show(<StarshipPageSync {...props} />);\n        props.pilots = await swapi.fetchMultiple(props.starship.pilots, { minimum: '60%' });\n        return <StarshipPageSync {...props} />;\n    }\n}\n\nclass StarshipPageSync extends PureComponent {\n    static displayName = 'StarshipPageSync';\n\n    /**\n     * Render the component, making best effort using what props are given\n     *\n     * @return {VNode}\n     */\n    render() {\n        let { route, starship, pilots, films } = this.props;\n        if (!starship) {\n            return <Loading />;\n        }\n        return (\n            <div className=\"character-page\">\n                <h1>{starship.name}</h1>\n                <div>Model: {starship.model}</div>\n                <div>Manufacturer: {starship.manufacturer}</div>\n                <div>Cost in credits: {starship.cost_in_credits}</div>\n                <div>Length: {starship.length} m</div>\n                <div>Max atmosphering speed: {starship.max_atmosphering_speed} km/h</div>\n                <div>Max sublight speed: {starship.MGLT} MGLT</div>\n                <div>Hyperdrive rating: {starship.hyperdrive_rating}</div>\n                <div>Crew: {starship.crew}</div>\n                <div>Passengers: {starship.passenger}</div>\n                <div>Cargo capacity: {starship.cargo_capacity} kg</div>\n                <div>Consumables: {starship.consumables}</div>\n                <div>Starship class: {starship.starship_class}</div>\n                <h2>Pilots</h2>\n                <List urls={starship.pilots} items={pilots} pageName=\"character-summary\" route={route} />\n                <h2>Films</h2>\n                <List urls={starship.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n            </div>\n        );\n    }\n}\n\nexport {\n    StarshipPage as default,\n    StarshipPage,\n    StarshipPageSync,\n};\n","import React from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            var item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return (\n        <ul>\n        {\n            items.map((item) => {\n                let id = route.extractID(item.url);\n                let url = route.find(pageName, { id });\n                let text = item.pending ? '...' : item[field];\n                let linkProps = {\n                    href: url,\n                    className: (item.pending) ? 'pending' : undefined,\n                };\n                return <li key={id}><a {...linkProps}>{text}</a></li>;\n            })\n        }\n        </ul>\n    );\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nList.displayName = 'List';\n\nexport {\n    List as default,\n    List\n};\n","import React from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nLoading.displayName = 'Loading';\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}