{"version":3,"sources":["webpack:///./pages/planet-page.jsx","webpack:///./widgets/list.jsx","webpack:///./widgets/loading.jsx"],"names":["_react","__webpack_require__","_relaks","_list","PlanetPage","meanwhile","this","props","route","swapi","show","_react2","default","createElement","PlanetPageSync","fetchOne","params","id","planet","fetchMultiple","films","minimum","residents","AsyncComponent","displayName","_props2","name","diameter","rotation_period","orbital_period","climate","gravity","terrain","surface_water","population","List","urls","items","pageName","field","_loading2","PureComponent","map","url","index","item","pending","length","className","extractID","find","text","linkProps","href","undefined","key","defaultProps","Loading"],"mappings":"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","file":"planet-page.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { AsyncComponent } from 'relaks';\nimport { List } from 'widgets/list';\nimport Loading from 'widgets/loading';\n\nclass PlanetPage extends AsyncComponent {\n    static displayName = 'PlanetPage';\n\n    /**\n     * Retrieve remote data and render the synchronize half of this component\n     *\n     * @param  {Meanwhile}  meanwhile\n     *\n     * @return {VNode}\n     */\n    async renderAsync(meanwhile) {\n        let { route, swapi } = this.props;\n        let props = {\n            route,\n        };\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.planet = await swapi.fetchOne(`/planets/${route.params.id}/`);\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.films = await swapi.fetchMultiple(props.planet.films, { minimum: '60%' });\n        meanwhile.show(<PlanetPageSync {...props} />);\n        props.residents = await swapi.fetchMultiple(props.planet.residents, { minimum: '60%' });\n        meanwhile.show(<PlanetPageSync {...props} />);\n        return <PlanetPageSync {...props} />;\n    }\n}\n\nclass PlanetPageSync extends PureComponent {\n    static displayName = 'PlanetPageSync';\n\n    /**\n     * Render the component, making best effort using what props are given\n     *\n     * @return {VNode}\n     */\n    render() {\n        let { route, planet, films, residents } = this.props;\n        if (!planet) {\n            return <Loading />;\n        }\n        return (\n            <div>\n                <h1>{planet.name}</h1>\n                <div>Diameter: {planet.diameter} km</div>\n                <div>Rotation period: {planet.rotation_period} hr</div>\n                <div>Orbital period: {planet.orbital_period} days</div>\n                <div>Climate: {planet.climate}</div>\n                <div>Gravity: {planet.gravity}</div>\n                <div>Terrain: {planet.terrain}</div>\n                <div>Surface water: {planet.surface_water}</div>\n                <div>Population: {planet.population}</div>\n                <h2>Residents</h2>\n                <List urls={planet.residents} items={residents} pageName=\"character-summary\" route={route} />\n                <h2>Films</h2>\n                <List urls={planet.films} items={films} field=\"title\" pageName=\"film-summary\" route={route} />\n            </div>\n        );\n    }\n}\n\nexport {\n    PlanetPage as default,\n    PlanetPage,\n    PlanetPageSync,\n};\n","import React from 'react';\n\nfunction List(props) {\n    let { route, urls, items, field, pageName } = props;\n    if (urls) {\n        // accept single URL and object\n        if (typeof(urls) === 'string') {\n            urls = [ urls ];\n            items = [ items ];\n        }\n        // deal with holes in the data set\n        items = urls.map((url, index) => {\n            var item = (items) ? items[index] : null;\n            if (!item) {\n                item = { url, pending: true };\n            }\n            return item;\n        });\n    }\n    if (!items) {\n        return null;\n    }\n    if (items.length === 0) {\n        return <ul className=\"empty\"><li><span>none</span></li></ul>;\n    }\n    return (\n        <ul>\n        {\n            items.map((item) => {\n                let id = route.extractID(item.url);\n                let url = route.find(pageName, { id });\n                let text = item.pending ? '...' : item[field];\n                let linkProps = {\n                    href: url,\n                    className: (item.pending) ? 'pending' : undefined,\n                };\n                return <li key={id}><a {...linkProps}>{text}</a></li>;\n            })\n        }\n        </ul>\n    );\n}\n\nList.defaultProps = {\n    field: 'name'\n};\n\nList.displayName = 'List';\n\nexport {\n    List as default,\n    List\n};\n","import React from 'react';\n\nfunction Loading() {\n    return (\n        <div className=\"loading\">\n            <div>\n                <i className=\"fab fa-empire fa-spin\"/> Loading\n            </div>\n        </div>\n    );\n}\n\nLoading.displayName = 'Loading';\n\nexport {\n    Loading as default,\n    Loading\n};\n"],"sourceRoot":""}